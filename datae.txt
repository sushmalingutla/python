awslogs.conf(cloudwatchlogs)
[general]state_file = /var/lib/awslogs/agent-stateuse_gzip_http_content_encoding = true
[/var/log/messages]file = /var/log/messageslog_group_name = EC2Syslogslog_stream_name = {instance_id}
[/var/log/cron]file = /var/log/cronlog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S%z
[/var/log/bootlog]file = /var/log/boot.loglog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S%z
[/var/log/cloud-init-log]file = /var/log/cloud-init.loglog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S
[/var/log/cfn-init-cmd-log]file = /var/log/cfn-init-cmd.loglog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S
[/var/log/cfn-init-log]file = /var/log/cfn-init.loglog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S
[/var/log/cloud-init-output-log]file = /var/log/cloud-init-output.loglog_group_name = EC2Syslogslog_stream_name = {instance_id}datetime_format = %b %d %H:%M:%S

troposphere/EMRCluster.py
#!/usr/bin/pythonfrom troposphere import Parameter, Ref, Template, Tags, If, Equals, Not, Join, Output, GetAttfrom troposphere.constants import STRING, VPC_ID, COMMA_DELIMITED_LIST, NUMBERimport troposphere.cloudformation as cloudformationimport troposphere.iam as iamimport troposphere.ec2 as ec2import sysimport osimport inspect
template = Template()template.add_description(    "CloudFormation template for creating an EMR cluster"    )
cluster_name = template.add_parameter(Parameter(  "ClusterName",  Description="The name of the EMR Cluster",  Type="String",  Default="Predictive-Models-Rei"  ))
target_vpc = template.add_parameter(Parameter(  "TargetVpc",  Description="The VPC to create the application in",  Type=VPC_ID,  Default="vpc-4e427929"  ))
vault_name = template.add_parameter(Parameter(  "VaultName",  Description="This is the name of the vault for Password Vault (Prod/Nonprod)",  Type="String",  Default="Prod"  ))
instance_type = template.add_parameter(Parameter(  "InstanceType",  Description="The instance type for the emr cluster",  Type="String",  Default="m4.large"  ))
master_instance_type = template.add_parameter(Parameter(  "MasterInstanceType",  Description="The master instance type for the emr cluster",  Type="String",  Default="m4.large"  ))
core_instance_count = template.add_parameter(Parameter(  "CoreInstanceCount",  Description="The instance type for the emr cluster",  Type="Number",  Default="3"  ))
ec2_key_name = template.add_parameter(Parameter(  "Ec2KeyName",  Description="Key name to log into instance",  Type="String",  Default=""  ))
release_label = template.add_parameter(Parameter(  "ReleaseLabel",  Description="Release of emr to use",  Type="String",  Default="emr-5.8.1"  ))
route_53_hosted_zone = template.add_parameter(Parameter(  "Route53HostedZone",  Description="This is the route53 private hosted zone",  Type="String",  Default=""  ))
route_53_hosted_zone_id = template.add_parameter(Parameter(  "Route53HostedZoneId",  Description="This is the route53 private hosted zone id",  Type="String",  Default=""  ))
subnet_id = template.add_parameter(Parameter(  "SubnetId",  Description="Subnet prefix to deploy emr into",  Type="String",  Default="BusinessCritical"  ))
s3_bucket_logs = template.add_parameter(Parameter(  "S3BucketLogs",  Description="S3 logging location for emr",  Type="String",  Default=""  ))
s3_bucket_logs_arn = template.add_parameter(Parameter(  "S3BucketLogsArn",  Description="S3 arn logging location for emr",  Type="String",  Default=""  ))
s3_bucket_stack_arn = template.add_parameter(Parameter(  "StackRepositoryArn",  Description="S3 stack location",  Type="String",  Default=""  ))
account_domain = template.add_parameter(Parameter(  "AccountDomain",  Description="Domain for emr",  Type="String",  Default="retaile.vanguard.com"  ))
account_level = template.add_parameter(Parameter(  "AccountLevel",  Description="Account level for emr",  Type="String",  Default="eng"  ))
linux_base_sg = template.add_parameter(Parameter(  "LinuxBaseSg",  Description="Base Linux security group",  Type="String",  Default="sg-6ec3fb14"  ))
bootstrap_actions_file = template.add_parameter(Parameter(  "BootstrapActionsFile",  Description="S3 location for emr bootstrap actions",  Type="String",  Default=""  ))
configurations_file = template.add_parameter(Parameter(  "ConfigurationsFile",  Description="S3 location for emr configurations",  Type="String",  Default=""  ))
step_file = template.add_parameter(Parameter(  "StepsFile",  Description="S3 location for emr steps",  Type="String",  Default=""  ))
tags_file = template.add_parameter(Parameter(  "TagsFile",  Description="S3 location for emr tags",  Type="String",  Default=""  ))
ebs_kms_arn = template.add_parameter(Parameter(  "EbsKmsArn",  Description="Arn for emr ebs kms",  Type="String",  Default=""  ))
s3_kms_arn = template.add_parameter(Parameter(  "S3KmsArn",  Description="Arn for the s3 kms",  Type="String",  Default=""  ))
kms_s3_cert_key_alias = template.add_parameter(Parameter(  "KmsS3CertKeyAlias",  Description="The kms s3 cert key alias",  Type="String",  Default=""  ))
cert_s3_location = template.add_parameter(Parameter(  "CertS3Location",  Description="S3 location for cert",  Type="String",  Default=""  ))
emr_applications = template.add_parameter(Parameter(  "EMRApplications",  Description="Applications to be installed on emr",  Type="String",  Default=""  ))
stack_repository_path = template.add_parameter(Parameter(  "StackRepositoryPath",  Description="Bamboo dynamic path variable for EMR configurations",  Type="String",  Default=""  ))
additional_info = template.add_parameter(Parameter(  "AdditionalInfo",  Description="Additional information",  Type="String",  Default="{ 'ami64':'ami-2799b330','amiHvm64': 'ami-c59cb6d2','hadoopConfigurationVersion': '4.0', 'instanceAwsClientConfiguration' : {'proxyPort' : 80, 'proxyHost' : 'np-proxy.np-vanguard.com'} }"  ))
auth_table_key1 = template.add_parameter(Parameter(  "AuthTableKey1",  Description="This is the name of the table for Password Vault",  Type="String",  Default="DAX-Base"  ))
app_payload_s3_bucket_arn = template.add_parameter(Parameter(  "AppPayloadS3BucketArn",  Description="Arn for S3 Location of application deployment",  Type="String",  Default=""  ))
flagship_pas_raw_arn = template.add_parameter(Parameter(  "ReiRawArn",  Description="Arn for flagship-pas raw bucket",  Type="String",  Default=""  ))
flagship_pas_discovery_arn = template.add_parameter(Parameter(  "ReiDiscoveryArn",  Description="Arn for flagship-pas discovery bucket",  Type="String",  Default=""  ))
transaction_tables_arn = template.add_parameter(Parameter(  "TransactionTablesArn",  Description="Arn for S3 Location of transaction tables",  Type="String",  Default=""  ))
client_tables_arn = template.add_parameter(Parameter(  "ClientTablesArn",  Description="Arn for S3 Location of client tables",  Type="String",  Default=""  ))
use_case_s3_bucket_arn = template.add_parameter(Parameter(  "UseCaseS3BucketArn",  Description="Arn for S3 Location of rdna use case",  Type="String",  Default=""  ))
enterprise_tables_arn = template.add_parameter(Parameter(  "EnterpriseTablesArn",  Description="Arn for S3 Location of enterprise tables",  Type="String",  Default=""  ))
dna_workspace_arn = template.add_parameter(Parameter(  "DNAWorkspaceArn",  Description="Arn for dna-workspace bucket",  Type="String",  Default=""  ))
master_ebs_volume_type = template.add_parameter(Parameter(  "MasterEbsVolumeType",  Description="MasterEbsVolumeType",  Type="String",  Default=""  ))
master_ebs_volume_size = template.add_parameter(Parameter(  "MasterEbsVolumeSize",  Description="MasterEbsVolumeSize",  Type="String",  Default=""  ))
core_ebs_volume_type = template.add_parameter(Parameter(  "CoreEbsVolumeType",  Description="CoreEbsVolumeType",  Type="String",  Default=""  ))
core_ebs_volume_size = template.add_parameter(Parameter(  "CoreEbsVolumeSize",  Description="CoreEbsVolumeSize",  Type="String",  Default=""  ))
tlf_tables_arn = template.add_parameter(Parameter(  "TealeaftablesArn",  Description="Arn for Tealeaftables bucket",  Type="String",  Default=""  ))emrmastersg = template.add_resource(ec2.SecurityGroup(    "EMRMasterSG",    GroupDescription = "Master group for Elastic MapReduce",    VpcId = Ref(target_vpc),    SecurityGroupEgress = [      {        "IpProtocol": "tcp",        "FromPort": "80",        "ToPort": "80",        "DestinationPrefixListId": "pl-63a5400a",        }      ]    ))
emrslavesg = template.add_resource(ec2.SecurityGroup(    "EMRSlaveSG",    GroupDescription = "Slave group for Elastic MapReduce",    VpcId = Ref(target_vpc),    SecurityGroupEgress = [      {        "IpProtocol": "tcp",        "FromPort": "80",        "ToPort": "80",        "DestinationPrefixListId": "pl-63a5400a",        }      ]    ))
serviceaccessoutboundmaster = ec2.SecurityGroupRule(    IpProtocol="tcp",    FromPort="8443",    ToPort="8443",    DestinationSecurityGroupId=Ref(emrmastersg)    )serviceaccessoutboundslave = ec2.SecurityGroupRule(    IpProtocol="tcp",    FromPort="8443",    ToPort="8443",    DestinationSecurityGroupId=Ref(emrslavesg)    )
emrserviceaccesssg = template.add_resource(ec2.SecurityGroup(    "EMRServiceAccessSG",    DependsOn = [ "EMRMasterSG", "EMRSlaveSG" ],    GroupDescription = "Service Access Security Group for Elastic MapReduce",    VpcId = Ref(target_vpc),    SecurityGroupEgress = [ serviceaccessoutboundmaster, serviceaccessoutboundslave ]    ))
def CreateSecurityGroupIngress(RuleName, ipprotocolname, fromport, toport, sourceref, groupid):  if isinstance(sourceref,ec2.SecurityGroup):    template.add_resource(ec2.SecurityGroupIngress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      SourceSecurityGroupId = Ref(sourceref),      GroupId = Ref(groupid),      ))  elif isinstance(sourceref,basestring) and sourceref.startswith('sg-'):    template.add_resource(ec2.SecurityGroupIngress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      SourceSecurityGroupId = sourceref,      GroupId = Ref(groupid),      ))  else:    template.add_resource(ec2.SecurityGroupIngress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      CidrIp = sourceref,      GroupId = Ref(groupid),      ))
def CreateSecurityGroupEgress(RuleName, ipprotocolname, fromport, toport, destinationref, groupid):  if isinstance(destinationref, ec2.SecurityGroup):    template.add_resource(ec2.SecurityGroupEgress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      DestinationSecurityGroupId = Ref(destinationref),      GroupId = Ref(groupid),      ))  elif isinstance(destinationref,basestring) and destinationref.startswith('sg-'):    template.add_resource(ec2.SecurityGroupEgress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      DestinationSecurityGroupId = destinationref,      GroupId = Ref(groupid),      ))  else:    template.add_resource(ec2.SecurityGroupEgress(      RuleName,      IpProtocol = ipprotocolname,      FromPort = fromport,      ToPort = toport,      CidrIp = destinationref,      GroupId = Ref(groupid),      ))
# Add additional Ingress and Egress rule for master sgCreateSecurityGroupIngress("EMRMasterInboundFromMasterTCPSG","tcp",0,"65535",emrmastersg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundFromMasterUDPSG","udp",0,65535,emrmastersg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundFromMasterICMPSG","icmp",-1,-1,emrmastersg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInbounFromSlaveTCPSG","tcp",0,65535,emrslavesg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundFromSlaveUDPSG","udp",0,65535,emrslavesg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundSlaveICMPSG","icmp",-1,-1,emrslavesg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundFromServiceAccessSG","tcp",8443,8443,emrserviceaccesssg,emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForHUESG","tcp",8888,8888,"10.0.0.0/8",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForZeppelinSG","tcp",8890,8890,"10.142.16.0/22",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForHadoopSytatusNameNodeSG","tcp",50070,50070,"10.142.16.0/22",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForHadoopJobHistorySG","tcp",19888,19888,"10.142.16.0/22",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForHiveSG","tcp",10002,10002,"10.142.16.0/22",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForHadoopResourceMgrSG","tcp",8088,8088,"10.142.16.0/22",emrmastersg)CreateSecurityGroupIngress("EMRMasterInboundForSparkHistoryServerSG","tcp",18480,18480,"10.0.0.0/8",emrmastersg)CreateSecurityGroupEgress("EMRMasterOutboundSG", "-1", -1, -1, "10.0.0.0/0", emrmastersg)
# Add additional Ingress and Egress rule for slave sgCreateSecurityGroupIngress("EMRSlaveInboundFromMasterTCPSG","tcp",0,65535,emrmastersg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromMasterUDPSG","udp",0,65535,emrmastersg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromMasterICMPSG","icmp",-1,-1,emrmastersg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromSlaveTCPSG","tcp",0,65535,emrslavesg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromSlaveUDPSG","tcp",0,65535,emrslavesg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromSlaveICMPSG","icmp",-1,-1,emrslavesg,emrslavesg)CreateSecurityGroupIngress("EMRSlaveInboundFromServiceAccessSG","tcp",8443,8443,emrserviceaccesssg,emrslavesg)
CreateSecurityGroupEgress("EMRSlaveOutboundSG", "-1", -1, -1, "10.0.0.0/0", emrslavesg)
emrec2role=template.add_resource(iam.Role(    "EMREC2Role",    AssumeRolePolicyDocument={      "Statement": [{        "Effect": "Allow",        "Principal": {          "Service":          "ec2.amazonaws.com"          },        "Action": ["sts:AssumeRole"]        }]      },    ManagedPolicyArns=[      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/CloudWatchLogsCustomerManaged"]),      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/Ec2KmsCustomerManaged"]),      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/KMSEncryptS3CustomerManaged"]),      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/KMSDecryptS3CustomerManaged"]),      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/KMSEmrCertCustomerManaged"]),      Join("",["arn:aws:iam::",Ref("AWS::AccountId"),":policy/",Ref("AuthTableKey1"),Ref("VaultName"),"PasswordVaultRemotePolicy"])      ],    Policies=[iam.Policy(      PolicyName="EMREC2CustomerManaged",      PolicyDocument={        "Version": "2012-10-17",        "Statement": [         {          "Effect": "Allow",          "Resource": "*",          "Action": [            "cloudwatch:*",            "dynamodb:*",            "ec2:Describe*",            "elasticmapreduce:Describe*",            "elasticmapreduce:ListBootstrapActions",            "elasticmapreduce:ListClusters",            "elasticmapreduce:ListInstanceGroups",            "elasticmapreduce:ListInstances",            "elasticmapreduce:ListSteps",            "kinesis:CreateStream",            "kinesis:DeleteStream",            "kinesis:DescribeStream",            "kinesis:GetRecords",            "kinesis:GetShardIterator",            "kinesis:MergeShards",            "kinesis:PutRecord",            "kinesis:SplitShard",            "rds:Describe*",            "sdb:*",            "sns:*",            "sqs:*"            ]          },          {            "Sid": "AWSS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [               "arn:aws:s3:::elasticmapreduce/*"            ]          },          {            "Sid": "AWSS3ListBucketPermissions",            "Effect": "Allow",            "Action": [                "s3:ListBucket",                "s3:ListAllMyBuckets"            ],            "Resource": [               "*"            ]          },          {            "Sid": "DSDataS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",["arn:aws:s3:::vgi-retail-",Ref(account_level),"-",Ref("AWS::Region"),"-emr/*"]),                Join("",["arn:aws:s3:::vgi-retail-",Ref(account_level),"-",Ref("AWS::Region"),"-emr-archive/*"]),                Join("",["arn:aws:s3:::vgi-retail-",Ref(account_level),"-",Ref("AWS::Region"),"-emr-app/*"]),                Join("",["arn:aws:s3:::vgi-retail-",Ref(account_level),"-",Ref("AWS::Region"),"-emr-install/*"])            ]          },          {            "Sid": "DSWorkspaceS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:PutObject",                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",["arn:aws:s3:::vgi-retail-",Ref(account_level),"-",Ref("AWS::Region"),"-emr-workspace/*"])            ]          },          {            "Sid": "DSStackS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:PutObject",                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",[Ref(s3_bucket_logs_arn)]),                Join("",[Ref(s3_bucket_stack_arn)])            ]          },          {            "Sid": "ReiS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:PutObject",                "s3:GetObject",                "s3:GetObjectVersion",                "s3:DeleteObject",                "s3:ListBucket"            ],            "Resource": [                Join("",[Ref(flagship-pas_raw_arn)]),                Join("",[Ref(flagship-pas_discovery_arn)])            ]          },          {            "Sid": "AppPayloadS3BucketPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",[Ref(app_payload_s3_bucket_arn)]),            ]          },          {            "Sid": "TransactionTablesArnPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",[Ref(transaction_tables_arn)])            ]          },          {            "Sid": "ClientTablesArnPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",[Ref(client_tables_arn)])            ]          },          {            "Sid": "TealeaftablesArnPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion",                "s3:ListBucket"                            ],            "Resource": [                Join("",[Ref(tlf_tables_arn)])            ]          },                         {            "Sid": "UseCaseS3BucketArnPermissions",            "Effect": "Allow",            "Action": [                "s3:GetObject",                "s3:GetObjectVersion"            ],            "Resource": [                Join("",[Ref(use_case_s3_bucket_arn)])            ]          },          {            "Sid": "DnaWorkspaceBucketPermissions",            "Effect": "Allow",            "Action": [                "s3:PutObject",                "s3:GetObject",                "s3:GetObjectVersion",                "s3:DeleteObject",                "s3:ListBucket"            ],            "Resource": [                Join("", [Ref(dna_workspace_arn)]),            ]          },          {            "Sid": "AppPayloadS3BucketPermissionsDeny",            "Effect": "Deny",            "Action": [                "s3:DeleteObject",                "s3:PutObject"            ],            "Resource": [                Join("",[Ref(app_payload_s3_bucket_arn)]),            ]          },                                        ]        }      )      ]    ))
emrec2instanceprofile=template.add_resource(iam.InstanceProfile(  "EMREC2InstanceProfile",  Path="/",  Roles=[Ref("EMREC2Role")]  ))
emrservicerole=template.add_resource(iam.Role(    "EMRServiceRole",    AssumeRolePolicyDocument={      "Statement": [{        "Effect": "Allow",        "Principal": {          "Service":          "elasticmapreduce.amazonaws.com"          },        "Action": ["sts:AssumeRole"]        }]      },    ManagedPolicyArns=["arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"]    ))
emrautoscalingrole=template.add_resource(iam.Role(    "EMRAutoScalingRole",    AssumeRolePolicyDocument={      "Statement": [{        "Effect": "Allow",        "Principal": {          "Service": [            "elasticmapreduce.amazonaws.com",            "application-autoscaling.amazonaws.com"            ]          },        "Action": ["sts:AssumeRole"]        }]      },    ManagedPolicyArns=["arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"]    ))
waithandle=template.add_resource(    cloudformation.WaitConditionHandle("waithandle"))
waitcodition=template.add_resource(    cloudformation.WaitCondition(    "waitcondition",    Count = 1,    Handle = Ref(waithandle),    Timeout = 3600,    DependsOn = ["EMRClusterPhysicalResourceId"]    ))
class SubnetLookupLambda(cloudformation.AWSCustomObject):    resource_type = "Custom::SubnetInfo"
    props = {        'ServiceToken': (basestring, True),        'SubnetNameBeginsWith': (basestring, True),        'OnlyOne': (basestring, True),        'Await': (basestring, True)    }    class CreateEMRCluster(cloudformation.AWSCustomObject):    resource_type = "Custom::CreateEMRCluster"    props = {            'ServiceToken': (basestring, True),            'ClusterName': (basestring, True),            "MasterInstanceType": (basestring, True),            "InstanceType": (basestring, True),            "CoreInstanceCount": (basestring, True),            "Ec2KeyName": (basestring, True),            "ReleaseLabel": (basestring, True),            "SubnetId": (basestring, True),            "S3BucketLogs": (basestring, True),            "AccountDomain": (basestring, True),            "MasterSG": (basestring, True),            "SlaveSG": (basestring, True),            "ServiceAccessSG": (basestring, True),            "LinuxBaseSG": (basestring, True),            "BootstrapActionsFile": (basestring, True),            "ConfigurationFile": (basestring, True),            "StepsFile": (basestring, True),            "TagsFile": (basestring, True),            "EbsKmsArn": (basestring, True),            "S3KmsArn": (basestring, True),            "KmsS3CertKeyAlias": (basestring, True),            "CertS3Location": (basestring, True),            "JobFlowRole": (basestring, True),            "ServiceRole": (basestring, True),            "AutoScalingRole": (basestring, True),            "EMRApplications": (list, True),            "AdditionalInfo": (basestring, True),            "MasterSG": (basestring, True),            "SlaveSG": (basestring, True),            "ServiceAccessSG": (basestring, True),            "WaitConditionSignalURL": (basestring, True)            }
subnetId = template.add_resource(SubnetLookupLambda(    "subnetId",    ServiceToken=Join("", ["arn:aws:lambda:", Ref("AWS::Region"), ":",                           Ref("AWS::AccountId"),                           ":function:AwsSubnetLookup"]),        SubnetNameBeginsWith=Ref(subnet_id),    OnlyOne="true",    Await="true"    ))
emrcluster = template.add_resource(CreateEMRCluster(    "EMRClusterPhysicalResourceId",    DependsOn = [ "EMRMasterSG", "EMRSlaveSG", "EMRServiceAccessSG",        "EMRServiceRole", "EMRAutoScalingRole", "EMREC2Role",        "EMRMasterInboundFromMasterTCPSG", "EMRMasterInboundFromMasterUDPSG",        "EMRMasterInboundFromMasterICMPSG", "EMRMasterInbounFromSlaveTCPSG",        "EMRMasterInboundFromSlaveUDPSG", "EMRMasterInboundSlaveICMPSG",        "EMRMasterInboundFromServiceAccessSG", "EMRMasterInboundForHUESG",        "EMRMasterOutboundSG", "EMRSlaveInboundFromMasterTCPSG",        "EMRSlaveInboundFromMasterUDPSG", "EMRSlaveInboundFromMasterICMPSG",        "EMRSlaveInboundFromSlaveTCPSG", "EMRSlaveInboundFromSlaveUDPSG",        "EMRSlaveInboundFromSlaveICMPSG", "EMRSlaveInboundFromServiceAccessSG",        "EMRSlaveOutboundSG"],    ServiceToken=Join("",        ["arn:aws:lambda:",Ref("AWS::Region"),":",Ref("AWS::AccountId"),":function:Lambda-EMR-Cluster-Creator_func"]),    ClusterName=Ref(cluster_name),    MasterInstanceType=Ref(master_instance_type),    InstanceType=Ref(instance_type),    CoreInstanceCount=Ref(core_instance_count),    Ec2KeyName=Ref(ec2_key_name),    ReleaseLabel=Ref(release_label),    SubnetId=GetAtt(subnetId,"SubnetId"),    S3BucketLogs=Ref(s3_bucket_logs),    AccountDomain=Ref(account_domain),    BootstrapActionsFile=Ref(bootstrap_actions_file),    ConfigurationFile=Ref(configurations_file),    StepsFile=Ref(step_file),    TagsFile=Ref(tags_file),    EbsKmsArn=Ref(ebs_kms_arn),    S3KmsArn=Ref(s3_kms_arn),    KmsS3CertKeyAlias=Ref(kms_s3_cert_key_alias),    CertS3Location=Ref(cert_s3_location),    JobFlowRole=Ref(emrec2instanceprofile),    ServiceRole=Ref(emrservicerole),    AutoScalingRole=Ref(emrautoscalingrole),    EMRApplications=Ref(emr_applications),    AdditionalInfo=Ref(additional_info),    MasterSG=Ref(emrmastersg),    SlaveSG=Ref(emrslavesg),    ServiceAccessSG=Ref(emrserviceaccesssg),    LinuxBaseSG=Ref(linux_base_sg),    StackRepositoryPath=Ref(stack_repository_path),    MasterEbsVolumeSize=Ref(master_ebs_volume_size),    MasterEbsVolumeType=Ref(master_ebs_volume_type),     CoreEbsVolumeSize=Ref(core_ebs_volume_size),    CoreEbsVolumeType=Ref(core_ebs_volume_type),    WaitConditionSignalURL=Ref(waithandle)    ))
template.add_output([  Output(    "EMRMasterSG",    Description="Master group for Elastic MapReduce",    Value=Ref(emrmastersg)    ),  Output(    "EMRSlaveSG",    Description="Slave group for Elastic MapReduce",    Value=Ref(emrslavesg)    ),  Output(    "EMRServiceAccessSG",    Description="Service Access Security Group for Elastic MapReduce",    Value=Ref(emrserviceaccesssg)    ),  Output(    "EMREC2Role",    Description="Role for EMR EC2 instances",    Value=Ref(emrec2role)    ),  Output(    "EMREC2InstanceProfile",    Description="Instance Profile for EMR EC2 instances",    Value=Ref(emrec2instanceprofile)    ),  Output(    "EMRServiceRole",    Description="EMR Service Role",    Value=Ref(emrservicerole),    ),  Output(    "EMRAutoScalingRole",    Description="Autoscaling Role for EMR Autoscaling Services",    Value=Ref(emrautoscalingrole)    ),  Output(    "ClusterName",    Description="The name of the EMR Cluster",    Value=Ref(cluster_name)    ),  Output(    "MasterInstanceType",    Description="The master instance type for the emr cluster",    Value=Ref(master_instance_type)    ),                         Output(    "TargetVpc",    Description="The VPC to create the application in",    Value=Ref(target_vpc)    ),  Output(    "VaultName",    Description="This is the name of the vault for Password Vault (Prod/Nonprod)",    Value=Ref(vault_name)    ),                       Output(    "InstanceType",    Description="The instance type for the emr cluster",    Value=Ref(instance_type)    ),  Output(    "CoreInstanceCount",    Description="The instance type for the emr cluster",    Value=Ref(core_instance_count)    ),  Output(    "Ec2KeyName",    Description="Key name to log into instance",    Value=Ref(ec2_key_name)    ),  Output(    "ReleaseLabel",    Description="Release of emr to use",    Value=Ref(release_label)    ),  Output(    "SubnetId",    Description="Subnet to deploy emr into",    Value=GetAtt(subnetId,"SubnetId")    ),  Output(    "S3BucketLogs",    Description="S3 logging location for emr",    Value=Ref(s3_bucket_logs)    ),  Output(    "AccountDomain",    Description="Domain for emr",    Value=Ref(account_domain)    ),  Output(    "LinuxBaseSg",    Description="Base Linux security group",    Value=Ref(linux_base_sg)    ),  Output(    "BootstrapActionsFile",    Description="S3 location for emr bootstrap actions",    Value=Ref(bootstrap_actions_file)    ),  Output(    "ConfigurationsFile",    Description="S3 location for emr configurations",    Value=Ref(configurations_file)    ),  Output(    "StepFile",    Description="S3 location for emr steps",    Value=Ref(step_file)    ),  Output(    "TagsFile",    Description="S3 location for emr tags",    Value=Ref(tags_file)    ),  Output(    "EbsKmsArn",    Description="Arn for emr ebs kms",    Value=Ref(ebs_kms_arn)    ),  Output(    "S3KmsArn",    Description="Arn for the s3 kms",    Value=Ref(s3_kms_arn)    ),  Output(    "KmsS3CertKeyAlias",    Description="The kms s3 cert key alias",    Value=Ref(kms_s3_cert_key_alias)    ),  Output(    "CertS3Location",    Description="S3 location for cert",    Value=Ref(cert_s3_location)    ),  Output(    "EMRApplications",    Description="Applications to be installed on emr",    Value=Ref(emr_applications)    ),  Output(    "AdditionalInfo",    Description="Additional information",    Value=Ref(additional_info)    ),  Output(    "MasterEbsVolumeType",    Description="The master EBS volume type for the emr cluster",    Value=Ref(master_ebs_volume_type)    ),  Output(    "MasterEbsVolumeSize",    Description="The master EBS volume size for the emr cluster",    Value=Ref(master_ebs_volume_size)    ),  Output(    "CoreEbsVolumeType",    Description="The core EBS volume type for the emr cluster",    Value=Ref(core_ebs_volume_type)    ),  Output(    "CoreEbsVolumeSize",    Description="The core EBS volume size for the emr cluster",    Value=Ref(core_ebs_volume_size)    ),                Output(    "AuthTableKey1",    Description="This is the name of the table for Password Vault",    Value=Ref(auth_table_key1)    ),  Output(    "EMRClusterPhysicalResourceId",    Description="EMR Cluster Custom Resource Id",    Value=Ref(emrcluster)    )
  ])
def generate_template (filename, json):    directory = os.path.abspath(os.path.join(os.path.abspath(__file__), "../..", "templates"))
    if not os.path.exists(directory):        os.mkdir(directory, 0777)        print('Template directory generated: %s' % directory)
    try:        filepath = '%s/%s.json' % (directory, filename)        file = open(filepath, 'w')        file.write(json)        file.close()        print('CloudFormation Template generated: %s' % filepath)    except Exception as e:        raise(e)
generate_template(os.path.splitext(os.path.basename(sys.argv[0]))[0], template.to_json())
