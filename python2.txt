vgi_amt

""" The vgi_amt module will calculate the VGI amounts for accounts against each clients. 
This module has the following function(s)-
calculate_vgi_amt_total: This method will calculate VGI amounts.               """from pyspark import SparkConf,SparkContext,SQLContext,Row,HiveContext,StorageLevelimport hashlibimport timeimport sysimport datetime
APP_NAME="vgi_amt_total Data Item pyspark Application"
def calculate_vgi_amt_total(HiveCtx,properties_dict):        """ calculate_vgi_amt_total: This method will calculate the VGI amounts for accounts against each clients.        Input:sparkcontext,properties_dict        Output:Data Frame with (po_id,vgi_amt_total)"""      import debugutils        DEBUG = debugutils.is_debug( properties_dict )   
    balanced_fund_a_query="""SELECT ins_id                                   ,port_id                                   ,all_shr_ins_id                                   ,iss_typ_id                                   ,iss_grp_actg_id                                   ,inv_sgmntn_cd                                   ,asset_class_cd                                   ,lng_nm                                   ,cusip                                   FROM      {0}                                   WHERE     iss_typ_id <> 608                                   AND       (iss_grp_actg_id IN (1, 4) OR inv_sgmntn_cd = 'VIPER')                                   """.format(properties_dict.get( 'tc_vgi_int_ins_tableName'))                                       balanced_fund_a_df=HiveCtx.sql(balanced_fund_a_query)    HiveCtx.registerDataFrameAsTable(balanced_fund_a_df,"BALANCED_FUND_A_TABLE")        if DEBUG:        debugutils.debug_info("BALANCED_FUND_A_TABLE",balanced_fund_a_query,balanced_fund_a_df)          balanced_fund_b_query="""SELECT * from {0}""".format(properties_dict.get( 'tc_iss_trgt_aa_tableName'))                                     balanced_fund_b_df=HiveCtx.sql(balanced_fund_b_query)    HiveCtx.registerDataFrameAsTable(balanced_fund_b_df,"BALANCED_FUND_B_TABLE")        if DEBUG:        debugutils.debug_info("BALANCED_FUND_B_TABLE",balanced_fund_b_query,balanced_fund_b_df)          balanced_fund_ab_query="""SELECT   a.ins_id                                      ,a.port_id                                      ,a.iss_grp_actg_id                                      ,a.inv_sgmntn_cd                                         ,a.asset_class_cd                                       ,a.cusip                                                                                                                                                                                          ,b.hldg_aa_cd                                      ,(b.alocn_pc/100.000) as alocn_pct                                      ,(CASE WHEN b.hldg_aa_cd NOT IN ('BOND', 'CASH', 'STCK')                                                     THEN 'OTHR' ELSE b.hldg_aa_cd END)    as asset_class                                      FROM      BALANCED_FUND_A_TABLE as a                                               ,BALANCED_FUND_B_TABLE as b                                                WHERE     a.all_shr_ins_id = b.ins_id                                """                   
    balanced_fund_ab_df=HiveCtx.sql(balanced_fund_ab_query)    HiveCtx.registerDataFrameAsTable(balanced_fund_ab_df,"BALANCED_FUND_AB_TABLE")        if DEBUG:        debugutils.debug_info("BALANCED_FUND_AB_TABLE",balanced_fund_ab_query,balanced_fund_ab_df)          balanced_fund_query="""SELECT     ins_id                                     ,port_id                                     ,cusip                                                                          ,iss_grp_actg_id                                     ,inv_sgmntn_cd                                                                               ,asset_class_cd                                                                                                             ,(CASE WHEN asset_class == 'BOND' THEN alocn_pct                                                                        ELSE 0  END) as bond                                     ,(CASE WHEN asset_class == 'CASH' THEN alocn_pct                                                                        ELSE 0  END) as cash                                     ,(CASE WHEN asset_class == 'STCK' THEN alocn_pct                                                                        ELSE 0  END) as stck                                     FROM balanced_fund_ab_table"""    
    balanced_fund_df=HiveCtx.sql(balanced_fund_query).repartition(100, "port_id")    HiveCtx.registerDataFrameAsTable(balanced_fund_df,"BALANCED_FUND_TABLE")        if DEBUG:        debugutils.debug_info("BALANCED_FUND_TABLE",balanced_fund_query,balanced_fund_df)                      vgi_vba_bal_query="""SELECT      c.ins_id,                                     c.txn_vehicle_fl,                                     d.po_id,                                     e.mm121_end_bal_am as vgi_bal                                                                      from {0} as a                                         ,{1} as b                                         ,{2} as c                                         ,{3} as d                                         ,{4} as e                                         ,{5} as f                                     WHERE a.serv_id          = 90                                     AND   from_unixtime(unix_timestamp(a.efftv_end_dt , 'yyyy-MM-dd'), 'yyyy-MM-dd') = '9999-12-31'                                     AND   a.sag_id           = b.sag_id                                     AND   b.rlshp_id         = e.acct_id                                      AND   c.acct_id          = d.acct_id                                     AND   c.acct_posn_id     = d.acct_posn_id                                                                           AND   c.acct_id          = e.acct_id                                         AND   c.acct_posn_id     = e.acct_posn_id                                                                                                                                                                                                                                                          AND   d.acct_id          = e.acct_id                                     AND   d.acct_posn_id     = e.acct_posn_id                                                                         AND   e.mm121_end_bal_am <> 0                                     AND   e.prtn_id          = f.prtn_id                                     AND   e.seq_no           = 1                                     AND   f.actv_fl          = 'Y'                                                                                                      """.format(properties_dict.get( 'tsag_tableName' ), properties_dict.get( 'tsag_acct_rlshp_tableName' ),                                                properties_dict.get( 'tacct_posn_brk_tableName' ), properties_dict.get( 'tacct_brk_div_serv_tableName' ),                                                                                                                                                properties_dict.get( 'tbt_vbs_amt_posn_tableName' ), properties_dict.get( 'tmm_end_bal_prtn_tableName' )) 
    vgi_vba_bal_df=HiveCtx.sql(vgi_vba_bal_query)    HiveCtx.registerDataFrameAsTable(vgi_vba_bal_df,"VGI_VBA_BAL_TABLE")        if DEBUG:        debugutils.debug_info("VGI_VBA_BAL_TABLE",vgi_vba_bal_query,vgi_vba_bal_df)              vgi_vbs_bal_query="""SELECT      f.ins_id,                                     f.txn_vehicle_fl,                                     g.po_id,                                     h.mm121_end_bal_am as vgi_bal                                                                     from {0} as a                                         ,{1} as b                                         ,{2} as c                                         ,{3} as d                                         ,{4} as e                                         ,{5} as f                                         ,{6} as g                                         ,{7} as h                                         ,{8} as i                                     WHERE a.serv_id          = 9                                     AND   from_unixtime(unix_timestamp(a.efftv_end_dt , 'yyyy-MM-dd'), 'yyyy-MM-dd') = '9999-12-31'                                     AND   a.sag_id           = b.sag_id                                                                          AND   b.rlshp_id         = h.acct_id                                     AND   c.acct_id          = d.rlshp_id                                      AND   a.sag_id           = c.sag_id                                      AND   d.sag_id           = e.sag_id                                         AND   e.serv_id          IN (8,38)                                                                     AND   f.acct_id          = g.acct_id                                     AND   f.acct_posn_id     = g.acct_posn_id                                                                           AND   f.acct_id          = h.acct_id                                         AND   f.acct_posn_id     = h.acct_posn_id                                                                                                                                                                                                                                                          AND   g.acct_id          = h.acct_id                                     AND   g.acct_posn_id     = h.acct_posn_id                                                                         AND   h.mm121_end_bal_am <> 0                                     AND   h.prtn_id          = i.prtn_id                                     AND   h.seq_no           = 1                                     AND   i.actv_fl          = 'Y'                                                                                                      """.format(properties_dict.get( 'tsag_tableName' ), properties_dict.get( 'tsag_acct_rlshp_tableName' ),                                                properties_dict.get( 'tent_sag_pos_rlshp_tableName' ), properties_dict.get( 'tsag_acct_rlshp_tableName' ),                                                properties_dict.get( 'tsag_tableName' ),  properties_dict.get( 'tacct_posn_brk_tableName' ), properties_dict.get( 'tacct_brk_div_serv_tableName' ),                                                                                                                                                 properties_dict.get( 'tbt_vbs_amt_posn_tableName' ), properties_dict.get( 'tmm_end_bal_prtn_tableName' )) 
    vgi_vbs_bal_df=HiveCtx.sql(vgi_vbs_bal_query)    HiveCtx.registerDataFrameAsTable(vgi_vbs_bal_df,"VGI_VBS_BAL_TABLE")        if DEBUG:        debugutils.debug_info("VGI_VBS_BAL_TABLE",vgi_vbs_bal_query,vgi_vbs_bal_df)                        vgi_bal_query = """SELECT c.ins_id,                              c.txn_vehicle_fl,                              c.po_id, sum(c.vgi_bal) as mm121_end_bal_am                       FROM (SELECT *                             FROM VGI_VBA_BAL_TABLE a                             UNION ALL SELECT *                             FROM VGI_VBS_BAL_TABLE b) c                        GROUP BY c.po_id, c.ins_id, c.txn_vehicle_fl"""                            vgi_bal_df=HiveCtx.sql(vgi_bal_query)    HiveCtx.registerDataFrameAsTable(vgi_bal_df,"VGI_BAL_TABLE")        if DEBUG:        debugutils.debug_info("VGI_BAL_TABLE",vgi_bal_query,vgi_bal_df)                                              vgi_amt_query="""SELECT       b.po_id                                 ,(CASE WHEN (a.port_id IS NOT NULL)                                         THEN round((a.bond * b.mm121_end_bal_am), 2)                                        WHEN (a.asset_class_cd = 'BOND' AND a.ins_id = b.ins_id)                                        THEN b.mm121_end_bal_am                                        ELSE 0 END) as vgi_bond_amt                                 ,(CASE WHEN (a.port_id IS NOT NULL)                                        THEN round((a.stck * b.mm121_end_bal_am), 2)                                        WHEN (a.asset_class_cd = 'EQUITY' AND a.ins_id = b.ins_id)                                        THEN b.mm121_end_bal_am                                        ELSE 0  END) as vgi_stck_amt                                 ,(CASE WHEN (a.port_id IS NOT NULL)                                        THEN round((a.cash * b.mm121_end_bal_am), 2)                                        WHEN (a.cusip IN ('MME12N45N', 'PRM120450', 'PMI12P45P'))                                         THEN b.mm121_end_bal_am                                        WHEN (a.asset_class_cd = 'MONEYMKT'                                         AND b.txn_vehicle_fl = 'Y'                                         AND a.ins_id = b.ins_id)                                         THEN b.mm121_end_bal_am                                        ELSE 0  END) as vgi_cash_amt                                 FROM  BALANCED_FUND_TABLE a                                       FULL OUTER JOIN                                        VGI_BAL_TABLE b                                       ON a.ins_id = b.ins_id                                       WHERE b.po_id > 0                                       """                                                                                                                                   vgi_amt_df=HiveCtx.sql(vgi_amt_query)    HiveCtx.registerDataFrameAsTable(vgi_amt_df,"VGI_AMT_TABLE")         if DEBUG:        debugutils.debug_info("VGI_AMT_TABLE",vgi_amt_query,vgi_amt_df)                          vgi_amt_total_query = """ SELECT DISTINCT po_id                                    ,round(sum(vgi_bond_amt), 2) as vgi_bond_amt                                    ,round(sum(vgi_stck_amt), 2) as vgi_stck_amt                                                                      ,round(sum(vgi_cash_amt), 2) as vgi_cash_amt                             FROM VGI_AMT_TABLE                             GROUP BY po_id"""                                                  vgi_amt_total_df=HiveCtx.sql(vgi_amt_total_query)    HiveCtx.registerDataFrameAsTable(vgi_amt_total_df,"VGI_AMT_TOTAL_TABLE")           if DEBUG:        debugutils.debug_info("VGI_AMT_TOTAL_TABLE",vgi_amt_total_query,vgi_amt_total_df)                """"aum & equity_pct calculation    # Result RDD: (PO_ID, AUM, EQUITY_AMT)"""        aum_equity_query = """ SELECT DISTINCT po_id,                            (float(vgi_bond_amt) + float(vgi_stck_amt) + float(vgi_cash_amt)) as aum,                           float(vgi_stck_amt) as equity_amt,                           (CASE WHEN float(vgi_stck_amt) <> 0                                 THEN round(((float(vgi_stck_amt) / (float(vgi_bond_amt) + float(vgi_stck_amt) + float(vgi_cash_amt))) * 100), 2)                                  ELSE 0 END) as equity_pct                           FROM VGI_AMT_TOTAL_TABLE                        """                        aum_equity_df=HiveCtx.sql(aum_equity_query)    HiveCtx.registerDataFrameAsTable(aum_equity_df,"AUM_EQUITY_TABLE")                             if DEBUG:        debugutils.debug_info("AUM_EQUITY_TABLE", aum_equity_query, aum_equity_df)                     return aum_equity_df                                                                                                            if __name__ == "__main__":           conf = SparkConf().setAppName(APP_NAME)    sc   = SparkContext(conf=conf)    import properties_reader    properties_dict = properties_reader.get_properties_dict( sys.argv[1:] )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'sparkutils.py' )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'debugutils.py' )     DEBUG = properties_dict.get( 'debug_flag' )    import sparkutils    sparkutils.quiet_logs(sc)    sparkutils.addAllPyFiles(sc)    import debugutils        HiveCtx = HiveContext(sc)     calculate_vgi_amt_final = calculate_vgi_amt_total( HiveCtx, properties_dict )    calculate_vgi_amt_final.rdd.map(sparkutils.to_csv_line).saveAsTextFile( properties_dict.get( 'data_item_dir' ) + "/" + properties_dict.get( 'workflow_id' ) + "/" + "vgi_amt" )        sc.stop()
    
trf_balance.py

ira_contributions.py
""" The ira_contributions module will calculate IRA contributions against each clients. 
This module has the following function(s)-
calculate_ira_contributions: This method will calculate VGI amounts.               """from pyspark import SparkConf,SparkContext,SQLContext,Row,HiveContext,StorageLevelimport hashlibimport timeimport sysimport datetimeimport calendarfrom operator import addfrom pyspark.sql.types import IntegerTypefrom pyspark.sql.types import StringTypefrom pyspark.sql.functions import unix_timestamp   
APP_NAME="ira_contributions Data Item pyspark Application"
now = datetime.datetime.now()lastMonth = str( now.month - 1 )
if len( lastMonth ) == 1:    month = "0" + lastMonthelse:    month = lastMonth              begin_dt = str( now.year - 1 ) + "0101"end_dt = str( now.year ) + month + str( calendar.monthrange( now.year, now.month - 1 )[1] )   
prior_year = str( now.year - 1 )current_year = str( now.year )  
def calculate_ta_amt(HiveCtx, properties_dict):                     ta_amt_query = """SELECT    e.po_id,                                 f.procs_dt,                                 SUM(f.gross_am) as gross_am,                                f.tax_yy_typ_cd as cntrbn_tax_yy_typ_cd                                FROM     {0} a                                        ,{1} b                                        ,{2} c                                        ,{3} d                                        ,{4} e                                        ,{5} f                                WHERE   a.acct_id              = e.acct_id                                AND     b.sag_id               = c.sag_id                                AND     b.sag_id               = d.sag_id                                AND     c.rlshp_id             = e.acct_id                                AND     d.rgstrn_typ_cd NOT IN ('97','98','99')                                AND     trim(e.mntry_divsn_cd) = 'RETL'                                AND     e.port_id              = f.port_id                                  AND     e.po_id                = f.vgi_clnt_id                                AND     f.txn_status_cd        = 'PSTD'                                AND     f.gross_am             <> 0                                AND     f.cntrbn_typ_cd        = '01'                                                                                                                    AND     a.rtrmt_pln_typ_cd IN ('0001', '0002', '0003', '0017', '0018')                                AND     from_unixtime(unix_timestamp(f.procs_dt , 'yyyy-MM-dd'), 'yyyyMMdd') >= {6}                                AND     from_unixtime(unix_timestamp(f.procs_dt , 'yyyy-MM-dd'), 'yyyyMMdd') <= {7}                                      GROUP BY e.po_id, f.procs_dt, f.tax_yy_typ_cd                                                           """.format(properties_dict.get( 'tacct_tableName' ), properties_dict.get( 'tsag_tableName' ),                                           properties_dict.get( 'tsag_acct_rlshp_tableName' ), properties_dict.get( 'tagrmt_rgstrn_tableName' ),                                           properties_dict.get( 'tacct_ta_div_serv_tableName' ), properties_dict.get( 'ttxns_rtl_fin_hist_tableName' ),                                           begin_dt, end_dt)                                    return ta_amt_query                                def calculate_vba_amt(HiveCtx, properties_dict):           HiveCtx.udf.register("get_tax_yy", get_tax_yy, IntegerType())                                                                                                                     vba_amt_query = """SELECT   e.po_id,                                 f.rcrd_dt as procs_dt,                                SUM(                                 CASE                                WHEN f.ldgr_typ_cd = 'JRNS'                                 THEN f.rtrmt_acct_io_amt                                                  WHEN f.ldgr_typ_cd IN ('ACH', 'CHK', 'WIRE', 'CWR', '1CWR', 'JRNL', 'STOP', 'MCYS', 'ADFE', 'RSTP')                                THEN f.prnc_am * -1                                WHEN g.cusip_no = '999999999'                                THEN f.prnc_am * -1                                ELSE f.prnc_am END) as gross_am,                                get_tax_yy(f.tax_yy, {7}, {8}) as cntrbn_tax_yy_typ_cd                                                    FROM     {0} a                                        ,{1} b                                        ,{2} c                                        ,{3} d                                        ,{4} e                                        ,{5} f                                        ,{6} g                                WHERE   a.acct_id              = f.acct_id                                AND     b.sag_id               = c.sag_id                                AND     b.sag_id               = d.sag_id                                AND     b.serv_id              = 90                                                                AND     c.rlshp_id             = e.acct_id                                AND     d.rgstrn_typ_cd NOT IN ('97','98','99')                                AND     trim(e.mntry_divsn_cd) = 'RETL'                                AND     e.acct_id              = f.acct_id                                   AND     e.acct_posn_id         = f.acct_posn_id                                AND     f.acct_id              = g.acct_id                                   AND     f.acct_posn_id         = g.acct_posn_id                                 AND     f.txn_canc_cd          = ''                                    AND     (f.tax_yy              = {7}                                 OR      f.tax_yy               = {8})                                                   AND     a.rtrmt_pln_typ_cd IN ('0001', '0002', '0003', '0017', '0018')                                                                                                                              AND     from_unixtime(unix_timestamp(f.rcrd_dt , 'yyyy-MM-dd'), 'yyyyMMdd') >= {9}                                AND     from_unixtime(unix_timestamp(f.rcrd_dt , 'yyyy-MM-dd'), 'yyyyMMdd') <= {10}                                   GROUP BY e.po_id, f.rcrd_dt, f.tax_yy                                                                                              """.format(properties_dict.get( 'tacct_tableName' ), properties_dict.get( 'tsag_tableName' ),                                           properties_dict.get( 'tsag_acct_rlshp_tableName' ), properties_dict.get( 'tsag_vbs_rgstrn_tableName' ),                                           properties_dict.get( 'tacct_brk_div_serv_tableName' ), properties_dict.get( 'tbrkg_tran_tableName' ),                                           properties_dict.get( 'tacct_posn_brk_tableName' ), prior_year, current_year, begin_dt, end_dt)                                                                                                return vba_amt_query                                                                                                                                               
def calculate_ira_contributions(HiveCtx, properties_dict):        """ calculate_ira_contributions: This method will calculate the VGI amounts for accounts against each clients.        Input:sparkcontext,properties_dict        Output:Data Frame with (po_id,ira_contributions)"""      import debugutils        DEBUG = debugutils.is_debug( properties_dict )    import datetime    import calendar      
    # set date ranges    py_bgn_dt = str( now.year - 1 ) + "0101"    py_end_dt = str( now.year - 1 ) + "1231"    cy_bgn_dt = str( now.year ) + "0101"    cy_end_dt = str( now.year ) + month + str( calendar.monthrange( now.year, now.month - 1 )[1] )        py_bgn_dt = datetime.datetime.strptime(str(py_bgn_dt), '%Y%m%d').strftime("%Y-%m-%d")    py_end_dt = datetime.datetime.strptime(str(py_end_dt), '%Y%m%d').strftime("%Y-%m-%d")    cy_bgn_dt = datetime.datetime.strptime(str(cy_bgn_dt), '%Y%m%d').strftime("%Y-%m-%d")    cy_end_dt = datetime.datetime.strptime(str(cy_end_dt), '%Y%m%d').strftime("%Y-%m-%d")
    py_contrib = 0    cy_contrib = 0              # get TA query    ta_amt_query = calculate_ta_amt(HiveCtx, properties_dict)        # execute TA query and convert to DataFrame    ta_amt_df = HiveCtx.sql(ta_amt_query)    ta_amt_df.persist(StorageLevel.DISK_ONLY)        if DEBUG:        debugutils.debug_query_info("ta_amt_df",ta_amt_query,ta_amt_df)             # get VBA query    vba_amt_query = calculate_vba_amt(HiveCtx, properties_dict)        # execute TA query and convert to DataFrame    vba_amt_df = HiveCtx.sql(vba_amt_query)    vba_amt_df.persist(StorageLevel.DISK_ONLY)        if DEBUG:        debugutils.debug_query_info("vba_amt_df",vba_amt_query,vba_amt_df)        # register both dataframes as Temporary Tables      HiveCtx.registerDataFrameAsTable(ta_amt_df, "ta_amt_table")    HiveCtx.registerDataFrameAsTable(vba_amt_df, "vba_amt_table")             # execute final query to get gross_am and procs_dt for each po_id from both TA and VBA temporary tables     ira_contributions_query = """SELECT DISTINCT a.po_id, a.procs_dt, SUM(a.gross_am) as gross_am, a.cntrbn_tax_yy_typ_cd                                       FROM (SELECT * FROM ta_amt_table UNION ALL                                               SELECT * FROM vba_amt_table) a                                           GROUP BY  a.po_id, a.procs_dt, a.cntrbn_tax_yy_typ_cd"""         ira_contributions_df = HiveCtx.sql(ira_contributions_query)                                   ira_contributions_df.persist(StorageLevel.DISK_ONLY)        ta_amt_df.unpersist()    vba_amt_df.unpersist()             HiveCtx.registerDataFrameAsTable(ira_contributions_df, "ira_contributions_table")                cy_py_ira_cntrbn_query = """SELECT po_id,                                  (CASE WHEN to_date(procs_dt) >= \'{0}'\                                       AND  to_date(procs_dt) <= \'{1}'\                                       AND  cntrbn_tax_yy_typ_cd = 2                                       THEN gross_am                                        WHEN to_date(procs_dt) >= \'{2}'\                                       AND  to_date(procs_dt) <= \'{3}'\                                       AND  cntrbn_tax_yy_typ_cd = 1                                       THEN gross_am                                        ELSE 0 END) as py_contrib,                                                                       (CASE WHEN to_date(procs_dt) >= \'{2}'\                                       AND  to_date(procs_dt) <= \'{3}'\                                       AND  cntrbn_tax_yy_typ_cd = 2                                       THEN gross_am                                        ELSE 0 END) as cy_contrib                                 FROM ira_contributions_table                                """.format(py_bgn_dt, py_end_dt, cy_bgn_dt, cy_end_dt)                                                                cy_py_ira_cntrbn_df = HiveCtx.sql(cy_py_ira_cntrbn_query)            ira_contributions_df.unpersist()        HiveCtx.udf.register("py_flag", py_flag, StringType())    HiveCtx.udf.register("cy_flag", cy_flag, StringType())                HiveCtx.registerDataFrameAsTable(cy_py_ira_cntrbn_df, "cy_py_ira_cntrbn_table")               cy_py_flags_query = """SELECT DISTINCT po_id,                                  SUM(py_contrib) as py_contrib,                                  SUM(cy_contrib) as cy_contrib,                                  py_flag(py_contrib) as py_contrib_fl,                                  cy_flag(cy_contrib) as cy_contrib_fl                                  FROM cy_py_ira_cntrbn_table                                  GROUP BY po_id, py_contrib_fl, cy_contrib_fl"""                                       cy_py_flags_df = HiveCtx.sql(cy_py_flags_query)                                               if DEBUG:        debugutils.debug_query_info("cy_py_flags_df",cy_py_flags_query,cy_py_flags_df)                                                                  return cy_py_flags_df   
def get_tax_yy(tax_yy, prior_year, current_year):    """Map will assign 1 or 2 to cntrbn_tax_yy_typ_cd based on prior_year and current_year:
    Parameter : tax_yy
    Returns : cntrbn_tax_yy_typ_cd    """     cntrbn_tax_yy_typ_cd = 0    if tax_yy == prior_year:        cntrbn_tax_yy_typ_cd = 1    elif tax_yy == current_year:        cntrbn_tax_yy_typ_cd = 2        return cntrbn_tax_yy_typ_cd
def py_flag(py_contrib):    """Map will assign gross_amounts to py contrib and set flag:
    Parameter : Gross Amount
    Returns : py_contrib_fl    """     py_contrib_fl = "N"
    if py_contrib > 0:        py_contrib_fl = "Y"           return py_contrib_fl         
def cy_flag(cy_contrib):    """Map will assign gross_amounts to cy contrib and set flag:
    Parameter : Gross Amount
    Returns : cy_contrib_fl    """     cy_contrib_fl = "N"
    if cy_contrib > 0:        cy_contrib_fl = "Y"            return cy_contrib_fl                                                                                              if __name__ == "__main__":           conf = SparkConf().setAppName(APP_NAME)    sc   = SparkContext(conf=conf)    import properties_reader    properties_dict = properties_reader.get_properties_dict( sys.argv[1:] )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'sparkutils.py' )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'rddutils.py' )         sc.addPyFile( properties_dict.get( 'utility_path' ) + 'debugutils.py' )     sc.addPyFile( properties_dict.get( 'utility_path' ) + 'dateutils.py' )         DEBUG = properties_dict.get( 'debug_flag' )    import sparkutils    sparkutils.quiet_logs(sc)    sparkutils.addAllPyFiles(sc)    import debugutils        HiveCtx = HiveContext(sc)     calculate_ira_contributions_final = calculate_ira_contributions( HiveCtx, properties_dict )    calculate_ira_contributions_final.rdd.map(sparkutils.to_csv_line).saveAsTextFile( properties_dict.get( 'data_item_dir' ) + "/" + properties_dict.get( 'workflow_id' ) + "/" + "ira_contributions" )        sc.stop()
""" This module will calculate the target retirement fund balance for each po_id.  This will include both TA and VBA accounts.  
This module has the following function(s) - get_trf_balance_ta_query:  This method will return TA target fund balance Query get_trf_balance_vba_query:  This method will return VBA target fund balance Query calculate_trf_balance:  This method Executes Above Queries and Returns target retirement fund balances per po_id"""from pyspark import SparkConf, SparkContext, HiveContext, StorageLevelfrom pyspark.sql.functions import trimimport sysimport datetimefrom pyspark.sql.types import StringType
APP_NAME="trf_balance Data Item pyspark Application"
def get_trf_balance_ta_query (properties_dict):      """This method returns TA target balance query         Input:  properties_dict          Output: TA target balance Query """                                                         # query to select the target fund TA holdings for each po_id         trf_balance_ta_query = """SELECT c.port_id, c.po_id,b.mm121_end_bal_am as bal_am                                 FROM    {0} a                                        ,{1} b                                        ,{2} c                                        ,{3} d                                        ,{4} e                                WHERE   a.prtn_id = b.prtn_id                                AND     a.actv_fl = 'Y'                                AND     b.mm121_end_bal_am <> 0                                AND     c.acct_id = b.acct_id                                AND     c.acct_posn_id = b.acct_posn_id                                AND     trim(c.posn_serv_sgmnt_cd) NOT IN('COAS', 'OMNI')                                AND     d.port_id = c.port_id                                AND     b.seq_no = 1                                AND     b.acct_id = e.acct_id                                                            AND     (d.trgt_rtrmt_yy_no is NOT NULL                                OR      upper(d.lng_nm) like '%TARGET RETIREMENT%')                                AND     ((e.rtrmt_pln_typ_cd BETWEEN '0001' AND '0020') OR (e.rtrmt_pln_typ_cd IN ('0022', '0023')))                                """.format(properties_dict.get( 'tmm_end_bal_prtn_tableName' )                                          ,properties_dict.get( 'tbt_mf_amt_tableName' )                                          ,properties_dict.get( 'tacct_ta_div_serv_tableName' )                                          ,properties_dict.get( 'tc_vgi_int_ins_tableName' )                                          ,properties_dict.get( 'tacct_tableName' ))       return trf_balance_ta_query
def get_trf_balance_vba_query (properties_dict):      """This method returns VBA target balance query         Input:  properties_dict          Output: VBA target balance Query """             # query to select the target fund VBA holdings for each po_id         trf_balance_vba_query = """SELECT c.ins_id, d.po_id,b.mm121_end_bal_am as bal_am                                 FROM    {0} a                                        ,{1} b                                        ,{2} c                                        ,{3} d                                        ,{4} e                                        ,{5} f                                WHERE   a.prtn_id = b.prtn_id                                AND     a.actv_fl = 'Y'                                AND     b.mm121_end_bal_am <> 0                                AND     c.acct_id = b.acct_id                                AND     c.acct_posn_id = b.acct_posn_id                                 AND     from_unixtime(unix_timestamp(c.efftv_end_dt , 'yyyy-MM-dd'), 'yyyy-MM-dd') = '9999-12-31'                                AND     d.acct_id = c.acct_id                                AND     d.acct_posn_id = c.acct_posn_id                                AND     trim(d.posn_serv_sgmnt_cd) NOT IN('COAS', 'OMNI', 'VBO')                                AND     e.ins_id = c.ins_id                                AND     b.seq_no = 1                                AND     b.acct_id = f.acct_id                                                                   AND     (e.trgt_rtrmt_yy_no is NOT NULL                                OR      upper(e.lng_nm) like '%TARGET RETIREMENT%')                                AND     ((f.rtrmt_pln_typ_cd BETWEEN '0001' AND '0020') OR (f.rtrmt_pln_typ_cd IN ('0022', '0023')))                                """.format(properties_dict.get( 'tmm_end_bal_prtn_tableName' )                                          ,properties_dict.get( 'tbt_vbs_amt_posn_tableName' )                                          ,properties_dict.get( 'tacct_posn_brk_tableName')                                          ,properties_dict.get( 'tacct_brk_div_serv_tableName' )                                          ,properties_dict.get( 'tc_vgi_int_ins_tableName' )                                          ,properties_dict.get( 'tacct_tableName' ))       return trf_balance_vba_query  
def get_balanced_fund_query(properties_dict):        balanced_fund_query="""SELECT   ins_id                                   ,port_id                                   ,(CASE  WHEN instr(upper(lng_nm), 'VANGUARD TARGET RETIREMENT INCOME') > 0                                                            THEN 1900                                           WHEN instr(upper(lng_nm), 'TARGET RETIREMENT INCOME') > 0 AND iss_typ_id = 103                                                            THEN 1900                                           WHEN instr(upper(lng_nm), 'VANGUARD TARGET RETIREMENT') > 0 AND iss_typ_id = 103                                                            THEN split(lng_nm, ' ')[3]                                           WHEN instr(upper(lng_nm), 'TARGET RETIREMENT') > 0 AND iss_typ_id = 103                                                            THEN split(lng_nm, ' ')[2]                                                           ELSE 0  END)  as trf_year                                   FROM      {0}                                   WHERE     iss_typ_id <> 608                                   AND       (iss_grp_actg_id IN (1, 4) OR inv_sgmntn_cd = 'VIPER')                                   """.format(properties_dict.get( 'tc_vgi_int_ins_tableName'))     return balanced_fund_query        def calculate_trf_balance(HiveCtx, properties_dict):    """ Calculate retail target date fund balances : This method calls trf_balance_ta_query and trf_balance_vba query and calculates the retail target date fund balances.        Required TA and VBA target balance Queries are defined in separate methods. This method will execute the Query to DataFrame and register as Temporary Table and finally     calculates target balances for each po_id.        Input: sparkcontext, properties_dict    Output: final_trf_balance_df: DateFrame with UNIQUE po_id , total trf_balance    """    #    DEBUG = properties_dict.get( 'debug_flag' )    import debugutils        DEBUG = debugutils.is_debug( properties_dict )        # get target funds TA query    trf_balance_ta_query = get_trf_balance_ta_query(properties_dict)        # execute TA query and convert to DataFrame    trf_balance_ta_df = HiveCtx.sql(trf_balance_ta_query)    trf_balance_ta_df.persist(StorageLevel.DISK_ONLY)        if DEBUG:        debugutils.debug_query_info("trf_balance_ta_df",trf_balance_ta_query,trf_balance_ta_df)             # get target funds retail VBA query    trf_balance_vba_query = get_trf_balance_vba_query(properties_dict)        # execute VBA query and convert to DataFrame    trf_balance_vba_df = HiveCtx.sql(trf_balance_vba_query)    trf_balance_vba_df.persist(StorageLevel.DISK_ONLY)        if DEBUG:        debugutils.debug_query_info("trf_balance_vba_df",trf_balance_vba_query,trf_balance_vba_df)        # register both dataframes as Temporary Tables      HiveCtx.registerDataFrameAsTable(trf_balance_ta_df,"trf_balance_ta_table")    HiveCtx.registerDataFrameAsTable(trf_balance_vba_df,"trf_balance_vba_table")        balanced_fund_query = get_balanced_fund_query(properties_dict)    balanced_fund_df = HiveCtx.sql(balanced_fund_query)        balanced_fund_df.persist(StorageLevel.DISK_ONLY)        if DEBUG:        debugutils.debug_query_info("balanced_fund_df",balanced_fund_query,balanced_fund_df)                HiveCtx.registerDataFrameAsTable(balanced_fund_df,"balanced_fund_table")            balance_ta_query = """SELECT a.trf_year, b.po_id, b.bal_am                          FROM balanced_fund_table a                          FULL OUTER JOIN                           trf_balance_ta_table b                          ON a.port_id = b.port_id                          """    balance_vba_query = """SELECT a.trf_year, b.po_id, b.bal_am                           FROM balanced_fund_table a                           FULL OUTER JOIN                            trf_balance_vba_table b                           ON a.ins_id = b.ins_id                          """                                 balance_ta_df = HiveCtx.sql(balance_ta_query)    HiveCtx.registerDataFrameAsTable(balance_ta_df,"balance_ta_table")     balance_vba_df = HiveCtx.sql(balance_vba_query)    HiveCtx.registerDataFrameAsTable(balance_vba_df,"balance_vba_table")                                                             # execute final query to get target balance for each po_id from both TA and VBA temporary tables     final_trf_balance_query = """SELECT DISTINCT a.po_id, a.trf_year, SUM(a.bal_am) as trf_balance                                       FROM (SELECT * FROM balance_ta_table UNION ALL                                               SELECT * FROM balance_vba_table) a                                           GROUP BY  a.po_id, a.trf_year """         final_trf_balance_df = HiveCtx.sql(final_trf_balance_query)                               final_trf_balance_df.persist(StorageLevel.DISK_ONLY)      HiveCtx.registerDataFrameAsTable(final_trf_balance_df, "final_trf_balance_table")              trf_balance_ta_df.unpersist()    trf_balance_vba_df.unpersist()       balanced_fund_df.unpersist()              HiveCtx.registerDataFrameAsTable(final_trf_balance_df, "trf_yr_bal_table")             HiveCtx.udf.register("trf_usage", trf_usage, StringType())        trf_usage_query = """SELECT DISTINCT po_id, trf_year, trf_balance,                          trf_usage( trf_year, trf_balance ) as trf_usage_fl                           FROM trf_yr_bal_table                         """                             trf_usage_df = HiveCtx.sql(trf_usage_query)                                    if DEBUG:        debugutils.debug_query_info("trf_usage_df",trf_usage_query,trf_usage_df)                                                                  return trf_usage_df   
def trf_usage( trf_year, trf_balance ):
    TRF_START_YEAR = 2010    TRF_END_YEAR = 2060    trf_usage_fl = "N"            if trf_year >= TRF_START_YEAR and trf_year <= TRF_END_YEAR and trf_balance > 0:       trf_usage_fl = "Y"    return trf_usage_fl               
if __name__ == "__main__":    conf = SparkConf().setAppName(APP_NAME)    sc   = SparkContext(conf=conf)    import properties_reader    properties_dict = properties_reader.get_properties_dict( sys.argv[1:] )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'sparkutils.py' )    sc.addPyFile( properties_dict.get( 'utility_path' ) + 'debugutils.py' )     DEBUG = properties_dict.get( 'debug_flag' )    import sparkutils    sparkutils.quiet_logs(sc)    sparkutils.addAllPyFiles(sc)    import debugutils            HiveCtx=HiveContext(sc)     calculate_trf_balance_final = calculate_trf_balance(HiveCtx, properties_dict )    calculate_trf_balance_final.rdd.map(sparkutils.to_csv_line).saveAsTextFile(properties_dict.get( 'data_item_dir' ) + "/" + properties_dict.get( 'workflow_id' ) + "/" + "trf_balance" )        sc.stop()
